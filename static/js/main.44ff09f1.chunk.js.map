{"version":3,"sources":["Exercise.js","exercises.js","App.js","reportWebVitals.js","index.js"],"names":["Exercise","number","startingCSS","title","image","hints","props","units","task","startingBoxes","canAddBoxes","useState","css","setCSS","boxes","setBoxes","className","src","alt","dangerouslySetInnerHTML","__html","map","prop","index","data-prop","unit","data-unit","length","type","onClick","disabled","Array","box","contentEditable","autoCorrect","autoComplete","spellCheck","autoCapitalize","value","onChange","evt","target","exercises","App","ex","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","console","log"],"mappings":"0MACe,SAASA,EAAT,GAcX,IAbFC,EAaC,EAbDA,OAaC,IAZDC,mBAYC,8BATDC,EASC,EATDA,MACAC,EAQC,EARDA,MAQC,IAPDC,aAOC,MAPO,CACNC,MAAO,GACPC,MAAO,IAKR,EAHDC,EAGC,EAHDA,KAGC,IAFDC,qBAEC,MAFe,EAEf,MADDC,mBACC,WACqBC,mBAAST,GAD9B,mBACMU,EADN,KACWC,EADX,OAEyBF,mBAASF,GAFlC,mBAEMK,EAFN,KAEaC,EAFb,KAMD,OACE,0BAASC,UAAS,YAAOf,GAAzB,UACE,mCACE,qBAAKe,UAAU,cAAf,uBACA,6BAAKb,OAGP,mCACE,qBAAKc,IAAG,cAASb,GAASc,IAAKf,IAC/B,uCACE,mBAAGgB,wBAAyB,CAAEC,OAAQZ,KACtC,qBAAIQ,UAAU,QAAd,UACGX,EAAMC,MAAMe,KAAI,SAACC,EAAMC,GACtB,OACE,oBAEEC,aAAA,EACAL,wBAAyB,CAAEC,OAAQE,IAF9BC,MAMVlB,EAAME,MAAMc,KAAI,SAACI,EAAMF,GACtB,OACE,oBAEEG,aAAA,EACAP,wBAAyB,CAAEC,OAAQK,IAF9BF,MAMa,IAAvBlB,EAAMC,MAAMqB,QAAuC,IAAvBtB,EAAME,MAAMoB,QACvC,6DAKPjB,GACC,qBAAKM,UAAU,WAAf,SACE,gCACE,wBACEY,KAAK,SACLZ,UAAU,OACVa,QAAS,WACPd,GAAS,SAACD,GAAD,OAAWA,EAAQ,MAJhC,qBASA,wBACEgB,SAAoB,IAAVhB,EACVc,KAAK,SACLZ,UAAU,QACVa,QAAS,WACPd,GAAS,SAACD,GAAD,OAAWA,EAAQ,MALhC,6BAaN,yBAASE,UAAU,SAAnB,SACE,qBAAKA,UAAU,YAAf,SACG,YAAIe,MAAMjB,IAAQO,KAAI,SAACW,EAAKT,GAC3B,OACE,qBAEEP,UAAS,kBAAaO,GACtBU,iBAAe,GAFVV,UASf,sBAAKP,UAAU,SAAf,UACE,0BACEkB,YAAY,MACZC,aAAa,MACbC,WAAW,QACXC,eAAe,MACfrB,UAAU,0BACVsB,MAAO1B,EACP2B,SAtFR,SAAmBC,GACjB3B,EAAO2B,EAAIC,OAAOH,UAuFd,uBAAOtB,UAAU,QAAjB,SAA0BJ,UC9FlC,IAiDe8B,EAjDG,CAChB,CACEvC,MAAO,eACPK,KAAM,uCACNN,YAAY,uCAGZE,MAAO,uBACPC,MAAO,CACLC,MAAO,CAAC,iDACRC,MAAO,CAAC,gCAIZ,CACEJ,MAAO,eACPK,KACE,2EACFJ,MAAO,uBACPC,MAAO,CACLC,MAAO,CAAC,iDACRC,MAAO,CAAC,6BAAD,+BAIX,CACEJ,MAAO,iBACPC,MAAO,uBACPI,KAAK,sLAGLH,MAAO,CACLC,MAAO,CAAC,yCAAD,0EAKPC,MAAO,CAAC,kCAEVL,YAAY,2DCvCDyC,MAVf,WACE,OACE,+BACGD,EAAUrB,KAAI,SAACuB,EAAIrB,GAClB,OAAO,cAACvB,EAAD,aAAsBC,OAAQsB,EAAQ,GAAOqB,GAA9BrB,SCMfsB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,EAAgBc,QAAQC,O","file":"static/js/main.44ff09f1.chunk.js","sourcesContent":["import { useState } from \"react\";\nexport default function Exercise({\n  number,\n  startingCSS = `.container {\n  \n}`,\n  title,\n  image,\n  hints = {\n    props: [],\n    units: [],\n  },\n  task,\n  startingBoxes = 9,\n  canAddBoxes = false,\n}) {\n  const [css, setCSS] = useState(startingCSS);\n  const [boxes, setBoxes] = useState(startingBoxes);\n  function updateCSS(evt) {\n    setCSS(evt.target.value);\n  }\n  return (\n    <section className={`ex${number}`}>\n      <header>\n        <div className=\"small-label\">Øvelse</div>\n        <h2>{title}</h2>\n      </header>\n\n      <figure>\n        <img src={`img/${image}`} alt={title} />\n        <figcaption>\n          <p dangerouslySetInnerHTML={{ __html: task }} />\n          <ul className=\"hints\">\n            {hints.props.map((prop, index) => {\n              return (\n                <li\n                  key={index}\n                  data-prop\n                  dangerouslySetInnerHTML={{ __html: prop }}\n                />\n              );\n            })}\n            {hints.units.map((unit, index) => {\n              return (\n                <li\n                  key={index}\n                  data-unit\n                  dangerouslySetInnerHTML={{ __html: unit }}\n                />\n              );\n            })}\n            {hints.props.length === 0 && hints.units.length === 0 && (\n              <li>You're on your own</li>\n            )}\n          </ul>\n        </figcaption>\n      </figure>\n      {canAddBoxes && (\n        <div className=\"controls\">\n          <div>\n            <button\n              type=\"button\"\n              className=\"plus\"\n              onClick={() => {\n                setBoxes((boxes) => boxes + 1);\n              }}\n            >\n              Add box\n            </button>\n            <button\n              disabled={boxes === 0}\n              type=\"button\"\n              className=\"minus\"\n              onClick={() => {\n                setBoxes((boxes) => boxes - 1);\n              }}\n            >\n              Remove box\n            </button>\n          </div>\n        </div>\n      )}\n      <article className=\"output\">\n        <div className=\"container\">\n          {[...Array(boxes)].map((box, index) => {\n            return (\n              <div\n                key={index}\n                className={`box box-${index}`}\n                contentEditable\n              ></div>\n            );\n          })}\n        </div>\n      </article>\n\n      <div className=\"editor\">\n        <textarea\n          autoCorrect=\"off\"\n          autoComplete=\"off\"\n          spellCheck=\"false\"\n          autoCapitalize=\"off\"\n          className=\"prism-live language-css\"\n          value={css}\n          onChange={updateCSS}\n        ></textarea>\n        <style className=\"style\">{css}</style>\n      </div>\n    </section>\n  );\n}\n","/*\n    default values: {\n        startingBoxes: 9,\n        canAddBoxes: false,\n        startingCSS: `.container {\n        hints: {\n            props:[],\n            units:[]\n        }\n}`\n    }\n*/\nconst exercises = [\n  {\n    title: \"Simpelt grid\",\n    task: \"Lav tre kolonner, som er lige brede.\",\n    startingCSS: `.container {\n    display: block;\n}`,\n    image: \"grid-exercise-1.webp\",\n    hints: {\n      props: [`<code>grid-template-columns</code> (property)`],\n      units: [`<code>[n]fr</code> (value)`],\n    },\n  },\n\n  {\n    title: \"Simpelt grid\",\n    task:\n      \"Lav tre kolonner, hvor den midterste ikke fylder mere end dens indhold. \",\n    image: \"grid-exercise-2.webp\",\n    hints: {\n      props: [`<code>grid-template-columns</code> (property)`],\n      units: [`<code>[n]fr</code> (value)`, `<code>auto</code> (value)`],\n    },\n  },\n\n  {\n    title: \"Avanceret grid\",\n    image: \"grid-exercise-3.webp\",\n    task: `Lav tre lige brede kolonner, hvor hver række er 50px.\n    <code>.box-2</code> skal spænde over to rækker og to kolonner,\n    samt begynde på række 2 og kolonne 2.`,\n    hints: {\n      props: [\n        `<code>grid-auto-rows</code> (property)`,\n        `<code>grid-column</code> (property)`,\n        `<code>grid-row</code> (property)`,\n      ],\n      units: [`<code>span [n]</code> (value)`],\n    },\n    startingCSS: `.container {\n  \n}\n        \n.box-2 {\n          \n}`,\n  },\n];\n\nexport default exercises;\n","import Exercise from \"./Exercise\";\nimport exercises from \"./exercises.js\";\nfunction App() {\n  return (\n    <main>\n      {exercises.map((ex, index) => {\n        return <Exercise key={index} number={index + 1} {...ex}></Exercise>;\n      })}\n    </main>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}