{"version":3,"sources":["Exercise.js","exercises.js","App.js","reportWebVitals.js","index.js"],"names":["Exercise","str","number","startingCSS","title","image","hints","props","units","task","startingBoxes","canAddBoxes","exerciseKey","useState","localStorage","getItem","css","setCSS","boxes","setBoxes","data-exercise-key","className","src","alt","dangerouslySetInnerHTML","__html","map","prop","index","data-prop","unit","data-unit","length","type","onClick","disabled","Array","box","contentEditable","autoCorrect","autoComplete","spellCheck","autoCapitalize","value","onChange","evt","target","setItem","replaceAll","match","exercises","referenceCSS","App","ex","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.25879789.chunk.js","sourcesContent":["import { useState } from \"react\";\n//TODO: clear storage (globally and per ex)\nexport default function Exercise({\n  number,\n  startingCSS = `.container {\n  \n}`,\n  title,\n  image,\n  hints = {\n    props: [],\n    units: [],\n  },\n  task,\n  startingBoxes = 9,\n  canAddBoxes = false,\n}) {\n  const exerciseKey = `ex${number}`;\n  const [css, setCSS] = useState(\n    localStorage.getItem(exerciseKey) || startingCSS\n  );\n  const [boxes, setBoxes] = useState(startingBoxes);\n\n  function prefix(str) {\n    const classReg = /(\\.[a-z])/gi;\n    return str.replaceAll(\n      classReg,\n      (match) => `section[data-exercise-key=\"${exerciseKey}\"] ${match}`\n    );\n  }\n  function updateCSS(evt) {\n    setCSS(evt.target.value);\n    localStorage.setItem(exerciseKey, evt.target.value);\n  }\n  return (\n    <section data-exercise-key={exerciseKey}>\n      <header>\n        <div className=\"small-label\">Øvelse</div>\n        <h2>{title}</h2>\n      </header>\n\n      <figure>\n        <img src={`/grid-exercises-react/img/${image}`} alt={title} />\n        <figcaption>\n          <p dangerouslySetInnerHTML={{ __html: task }} />\n          <ul className=\"hints\">\n            {hints.props.map((prop, index) => {\n              return (\n                <li\n                  key={index}\n                  data-prop\n                  dangerouslySetInnerHTML={{ __html: prop }}\n                />\n              );\n            })}\n            {hints.units.map((unit, index) => {\n              return (\n                <li\n                  key={index}\n                  data-unit\n                  dangerouslySetInnerHTML={{ __html: unit }}\n                />\n              );\n            })}\n            {hints.props.length === 0 && hints.units.length === 0 && (\n              <li>You're on your own</li>\n            )}\n          </ul>\n        </figcaption>\n      </figure>\n      {/*<details>\n        <summary>My DOM</summary>\n        <pre>\n          {`<div class=\"container>\\n`}\n          {[...Array(boxes)].map((b, i) => {\n            return `  <div class=\".box-${i + 1}\">.box-${i + 1}</div>\\n`;\n          })}\n          {`</div>\\n`}\n        </pre>\n        </details>*/}\n      {canAddBoxes && (\n        <div className=\"controls\">\n          <div>\n            <button\n              type=\"button\"\n              className=\"plus\"\n              onClick={() => {\n                setBoxes((boxes) => boxes + 1);\n              }}\n            >\n              Add box\n            </button>\n            <button\n              disabled={boxes === 0}\n              type=\"button\"\n              className=\"minus\"\n              onClick={() => {\n                setBoxes((boxes) => boxes - 1);\n              }}\n            >\n              Remove box\n            </button>\n          </div>\n        </div>\n      )}\n      <article className=\"output\">\n        <div className=\"container\">\n          {[...Array(boxes)].map((box, index) => {\n            return (\n              <div\n                key={index}\n                className={`box box-${index}`}\n                contentEditable\n              ></div>\n            );\n          })}\n        </div>\n      </article>\n\n      <div className=\"editor\">\n        <textarea\n          autoCorrect=\"off\"\n          autoComplete=\"off\"\n          spellCheck=\"false\"\n          autoCapitalize=\"off\"\n          className=\"prism-live language-css\"\n          value={css}\n          onChange={updateCSS}\n        ></textarea>\n\n        <style className=\"style\">{prefix(css)}</style>\n      </div>\n      {/*<button\n        type=\"button\"\n        className=\"reset\"\n        onClick={() => {\n          updateCSS({ target: { value: startingCSS } });\n        }}\n      >\n        Reset\n    </button>*/}\n    </section>\n  );\n}\n","/*\n    default values: {\n        startingBoxes: 9,\n        canAddBoxes: false,\n        startingCSS: `.container {\n        hints: {\n            props:[],\n            units:[]\n        }\n}`\n    }\n*/\nconst exercises = [\n  {\n    canAddBoxes: true,\n    title: \"Simpelt grid\",\n    task: \"Lav tre kolonner, som er lige brede.\",\n    startingCSS: `.container {\n    display: block;\n}`,\n    referenceCSS: `.container {\n    display: grid;\n    /*I could also use grid-template-columns: repeat(3, 1fr) */\n    grid-template-columns: 1fr 1fr 1fr;    \n}`,\n    image: \"grid-exercise-1.webp\",\n    hints: {\n      props: [`<code>grid-template-columns</code> (property)`],\n      units: [`<code>[n]fr</code> (value)`],\n    },\n  },\n\n  {\n    title: \"Simpelt grid\",\n    task:\n      \"Lav tre kolonner, hvor den midterste ikke fylder mere end dens indhold. \",\n    image: \"grid-exercise-2.webp\",\n    hints: {\n      props: [`<code>grid-template-columns</code> (property)`],\n      units: [`<code>[n]fr</code> (value)`, `<code>auto</code> (value)`],\n    },\n  },\n\n  {\n    title: \"Avanceret grid\",\n    image: \"grid-exercise-3.webp\",\n    task: `Lav tre lige brede kolonner, hvor hver række er 50px.\n    <code>.box-2</code> skal spænde over to rækker og to kolonner,\n    samt begynde på række 2 og kolonne 2.`,\n    hints: {\n      props: [\n        `<code>grid-auto-rows</code> (property)`,\n        `<code>grid-column</code> (property)`,\n        `<code>grid-row</code> (property)`,\n      ],\n      units: [`<code>span [n]</code> (value)`],\n    },\n    startingCSS: `.container {\n  \n}\n        \n.box-2 {\n          \n}`,\n  },\n];\n\nexport default exercises;\n","import Exercise from \"./Exercise\";\nimport exercises from \"./exercises.js\";\nfunction App() {\n  return (\n    <main>\n      {exercises.map((ex, index) => {\n        return <Exercise key={index} number={index + 1} {...ex}></Exercise>;\n      })}\n    </main>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}